<#@ output extension=".cs" #>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.CodeDom.Compiler" #>
namespace Lochs.AutoGenerated.Ast
{
	public interface IVisitor<T> 
	{
<#
    foreach (var definition in AstBuilder.GetDefinition())
    {
        #>
		T Visit<#= definition.Name #>(<#= definition.Name #> <#= definition.Name.ToLower() #>); 
<#
	}
		#> 
	}

	public abstract class Expr 
	{ 
		public abstract T Accept<T>(IVisitor<T> visitor); 
	}

<#
    foreach (var definition in AstBuilder.GetDefinition())
    {
        #>

	public class <#= definition.Name #> : Expr
	{
<#=
	string.Join(Environment.NewLine, 
		definition.Properties
			.Select(x => $"		public {x.ClassName} {x.FieldName} {{ get; set; }}"))
#>
		public <#= definition.Name #>
		(
			<#=
				string.Join(", ", 
					definition.Properties
						.Select(x => $"{x.ClassName} {x.ConstructorName}"))
			#>
		) 
		{
<#=
	string.Join(Environment.NewLine, 
		definition.Properties
			.Select(x => $"			this.{x.FieldName} = {x.ConstructorName};"))
#>
		}

		public override T Accept<T>(IVisitor<T> visitor) 
		{
			return visitor.Visit<#= definition.Name #>(this); 
		}
	}
        
<#
    }
#>
	public abstract class Stmt
	{ 
	}

<#

    foreach (var definition in AstBuilder.GetStmtDefinition())
    {
        #>

	public class <#= definition.Name #> : Stmt
	{
<#=
	string.Join(Environment.NewLine, 
		definition.Properties
			.Select(x => $"		public {x.ClassName} {x.FieldName} {{ get; set; }}"))
#>
		public <#= definition.Name #>
		(
			<#=
				string.Join(", ", 
					definition.Properties
						.Select(x => $"{x.ClassName} {x.ConstructorName}"))
			#>
		) 
		{
<#=
	string.Join(Environment.NewLine, 
		definition.Properties
			.Select(x => $"			this.{x.FieldName} = {x.ConstructorName};"))
#>
		}
	}
        
<#
    }
#>
}


<#+
    internal static class AstBuilder
    {
        public static IEnumerable<AstDefinition> GetDefinition()
        {
            yield return new AstDefinition("Ternary",
                new AstDefinitionProperty("Expr", "condition"),
                new AstDefinitionProperty("Expr", "resultIfTrue"),
                new AstDefinitionProperty("Expr", "resultIfFalse"));

            yield return new AstDefinition("Binary",
                new AstDefinitionProperty("Expr", "left"),
                new AstDefinitionProperty("Token", "operator"),
                new AstDefinitionProperty("Expr", "right"));

            yield return new AstDefinition("Grouping",
                new AstDefinitionProperty("Expr", "expression"));

            yield return new AstDefinition("Literal",
                new AstDefinitionProperty("object", "value"));

            yield return new AstDefinition("Unary",
                new AstDefinitionProperty("Token", "operator"),
                new AstDefinitionProperty("Expr", "right"));
        }

        public static IEnumerable<AstDefinition> GetStmtDefinition()
        {
            yield return new AstDefinition("Expression",
                new AstDefinitionProperty("Expr", "expression"));

            yield return new AstDefinition("Print",
                new AstDefinitionProperty("Expr", "expression"));
        }
    }

    internal class AstDefinition
    {
        public string Name { get; }
        public AstDefinitionProperty[] Properties { get; }

        public AstDefinition(string name, params AstDefinitionProperty[] properties)
        {
            Name = name;
            Properties = properties;
        }
    }

    internal class AstDefinitionProperty
    {
        public string ClassName { get; }
        public string FieldName { get; }
        public string ConstructorName { get; }

        public AstDefinitionProperty(string className, string fieldName)
        {
            ClassName = className;
            FieldName = fieldName[0].ToString().ToUpper() + fieldName.Substring(1);
            ConstructorName = "@" + fieldName;
        }
    }
#>
