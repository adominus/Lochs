namespace Lochs.AutoGenerated.Ast
{
	public interface IVisitor<T> 
	{
		T VisitTernary(Ternary ternary); 
		T VisitBinary(Binary binary); 
		T VisitGrouping(Grouping grouping); 
		T VisitLiteral(Literal literal); 
		T VisitUnary(Unary unary); 
 
	}

	public abstract class Expr 
	{ 
		public abstract T Accept<T>(IVisitor<T> visitor); 
	}


	public class Ternary : Expr
	{
		public Expr Condition { get; set; }
		public Expr ResultIfTrue { get; set; }
		public Expr ResultIfFalse { get; set; }
		public Ternary
		(
			Expr @condition, Expr @resultIfTrue, Expr @resultIfFalse
		) 
		{
			this.Condition = @condition;
			this.ResultIfTrue = @resultIfTrue;
			this.ResultIfFalse = @resultIfFalse;
		}

		public override T Accept<T>(IVisitor<T> visitor) 
		{
			return visitor.VisitTernary(this); 
		}
	}
        

	public class Binary : Expr
	{
		public Expr Left { get; set; }
		public Token Operator { get; set; }
		public Expr Right { get; set; }
		public Binary
		(
			Expr @left, Token @operator, Expr @right
		) 
		{
			this.Left = @left;
			this.Operator = @operator;
			this.Right = @right;
		}

		public override T Accept<T>(IVisitor<T> visitor) 
		{
			return visitor.VisitBinary(this); 
		}
	}
        

	public class Grouping : Expr
	{
		public Expr Expression { get; set; }
		public Grouping
		(
			Expr @expression
		) 
		{
			this.Expression = @expression;
		}

		public override T Accept<T>(IVisitor<T> visitor) 
		{
			return visitor.VisitGrouping(this); 
		}
	}
        

	public class Literal : Expr
	{
		public object Value { get; set; }
		public Literal
		(
			object @value
		) 
		{
			this.Value = @value;
		}

		public override T Accept<T>(IVisitor<T> visitor) 
		{
			return visitor.VisitLiteral(this); 
		}
	}
        

	public class Unary : Expr
	{
		public Token Operator { get; set; }
		public Expr Right { get; set; }
		public Unary
		(
			Token @operator, Expr @right
		) 
		{
			this.Operator = @operator;
			this.Right = @right;
		}

		public override T Accept<T>(IVisitor<T> visitor) 
		{
			return visitor.VisitUnary(this); 
		}
	}
        
}


