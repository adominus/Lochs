using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Lochs.AutoGenerated.Ast;
using Xunit;

namespace Lochs.Tests
{
    public sealed class AstPrinterTests
    {
        private readonly IAstPrinter _sut;

        public AstPrinterTests()
        {
            _sut = new AstPrinter();
        }

        [Theory]
        [ClassData(typeof(PrettyPrintedExpresssionData))]
        public void Given_expression_then_should_expect_pretty_printed_string(
            Expr expression, string expected)
        {
            // Given
            // When
            var result = _sut.Print(expression);

            // Then
            Assert.Equal(expected, result);
        }
    }

    public class PrettyPrintedExpresssionData : IEnumerable<object[]>
    {
        public IEnumerator<object[]> GetEnumerator()
        {
            yield return new object[]
            {
                new Binary(
                    new Literal("foo"),
                    new Token(TokenType.Plus, "+", null, 0),
                    new Literal("bar")),
                "(+ foo bar)"
            };

            yield return new object[]
            {
                new Binary(
                    new Unary(
                        new Token(TokenType.Minus, "-", null, 1),
                        new Literal(123)),
                    new Token(TokenType.Star, "*", null, 1),
                    new Grouping(
                        new Literal(45.67))),
                "(* (- 123) (group 45.67))"
            };
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
}
