using System.Collections;
using System.Collections.Generic;
using Lochs.AutoGenerated.Ast;
using Xunit;

namespace Lochs.Tests
{
    public sealed class ReversePolishNotationPrinterTests
    {
        private readonly IAstPrinter _sut;

        public ReversePolishNotationPrinterTests()
        {
            _sut = new ReversePolishNotationPrinter();
        }

        [Theory]
        [ClassData(typeof(RpnPrintedExpresssionData))]
        public void Given_expression_then_should_expect_rpn_printed_string(
            Expr expression, string expected)
        {
            // Given
            // When
            var result = _sut.Print(expression);

            // Then
            Assert.Equal(expected, result);
        }
    }

    public class RpnPrintedExpresssionData : IEnumerable<object[]>
    {
        public IEnumerator<object[]> GetEnumerator()
        {
            yield return new object[]
            {
                new Binary(
                    new Literal(1),
                    new Token(TokenType.Plus, "+", null, 1),
                    new Literal(2)
                ),
                "1 2 +"
            };

            yield return new object[]
            {
                new Binary(
                    new Binary(
                        new Literal(1),
                        new Token(TokenType.Plus, "+", null, 1),
                        new Literal(2)
                    ),
                    new Token(TokenType.Star, "*", null, 1),
                    new Binary(
                        new Literal(4),
                        new Token(TokenType.Minus, "-", null, 1),
                        new Literal(3)
                    )
                ),
                "1 2 + 4 3 - *"
            };
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
}
